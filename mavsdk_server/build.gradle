buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.0'
    }
}

allprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        google()
        jcenter()
    }

    def mavsdk_server_release = "v0.24.0"

    task extractMavsdkServer(type: Copy) {
        mkdir project.buildDir.getAbsolutePath() + "/tmp"

        def extractForArch = { arch ->
            def archiveName = "mavsdk_server_android-" + arch + "_" + mavsdk_server_release + ".tar"
            def archiveFile = new File(project.buildDir.getAbsolutePath() + "/tmp/" + archiveName)
            def archiveUrl = "https://github.com/mavlink/MAVSDK/releases/download/" + mavsdk_server_release + "/mavsdk_server_android-" + arch + ".tar"
            def destDir = project.projectDir.getAbsolutePath() + "/src/main/jniLibs"

            if (!archiveFile.exists()) {
                project.logger.lifecycle("Downloading " + archiveFile.getName() + " into " + archiveFile.getAbsolutePath() + "...")
                new URL(archiveUrl).withInputStream{ i -> archiveFile.withOutputStream{ it << i }}
            } else {
                project.logger.lifecycle("Archive already exists! Skipping download!")
            }

            project.logger.lifecycle("Extracting into " + destDir)
            copy {
                from tarTree(archiveFile)
                eachFile({ file -> if (file.getName().endsWith(".so")) file.setMode(0755) })
                into (destDir)
            }
        }

        extractForArch("arm64")
        extractForArch("arm")
    }
    build.dependsOn extractMavsdkServer

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'MAVSDK-Server'
                    packaging 'aar'
                    description 'MAVSDK server for Android.'
                    url 'https://github.com/mavlink/MAVSDK-Java'

                    scm {
                        connection 'scm:git:https://github.com/mavlink/MAVSDK-Java'
                        developerConnection 'scm:git:https://github.com/mavlink/MAVSDK-Java'
                        url 'https://github.com/mavlink/MAVSDK-Java'
                    }

                    licenses {
                        license {
                            name 'BSD 3-Clause "New"'
                            url 'https://opensource.org/licenses/BSD-3-Clause'
                        }
                    }

                    developers {
                        developer {
                            id 'jonasvautherin'
                            name 'Jonas Vautherin'
                            email 'jonas.vautherin@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

android {
    compileSdkVersion 29

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        archivesBaseName = 'mavsdk-server'
        group = 'io.mavsdk'
        versionCode 1
        version '0.3.0'

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}
