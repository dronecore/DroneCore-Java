buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.8"
    }
}

subprojects {
    apply plugin: 'com.google.protobuf'
    apply plugin: 'idea'
    apply plugin: 'java-library'

    group = 'org.dronecode.sdk'
    version = '0.1.0'

    repositories {
        jcenter()
    }

    configurations {
        checkstyleClasspath
    }

    dependencies {
        checkstyleClasspath 'com.puppycrawl.tools:checkstyle:8.5'
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    def grpcVersion = '1.8.0'

    protobuf {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.5.0'
        }

        plugins {
            javalite {
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }

            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }

        generateProtoTasks {
            all()*.each { task ->
                task.builtins {
                    remove java
                }

                task.plugins {
                    javalite {}

                    grpc {
                        option 'lite'
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            proto {
                srcDir '../proto/protos'
            }

            java {
                srcDir 'build/generated/source/proto/main/grpc'
                srcDir 'build/generated/source/proto/main/javalite'
            }
        }
    }

    task checkstyle(type: Checkstyle) {
        configFile = rootProject.file("config/checkstyle/checkstyle.xml")
        source 'src'
        include '**/*.java'
        exclude '**/gen/**'

        classpath = project.files()
        checkstyleClasspath = project.configurations.checkstyleClasspath

        maxWarnings 0

        reports {
            xml.enabled true
            xml.destination new File("$project.buildDir/reports/checkstyle/checkstyle_report.xml")

            html.enabled true
            html.destination new File("$project.buildDir/reports/checkstyle/checkstyle_report.html")
        }
    }

    build.dependsOn 'checkstyle'

    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
        }
    }

    dependencies {
        implementation "io.grpc:grpc-okhttp:${grpcVersion}"
        implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation 'org.slf4j:slf4j-api:1.7.25'

        compile 'io.reactivex.rxjava2:rxjava:2.1.7'

        testCompile "io.grpc:grpc-testing:${grpcVersion}"
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.13.0'
    }
}
